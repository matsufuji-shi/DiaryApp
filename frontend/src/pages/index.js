import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import DiaryCalendar from './calendar';

export default function Homes() {
  const [lists, setLists] = useState([]);
  const [error, setError] = useState(null);  // エラーメッセージ用のステートを追加
  const [confirmDelete, setConfirmDelete] = useState(null);  // 削除確認用ステート

  useEffect(() => {
    fetch('http://localhost:3001/api/diaries')
      .then(res => res.json())
      .then(data => setLists(data))
      .catch(err => console.error('データ取得エラー:', err));
  }, []);

  const router = useRouter();

  // 削除確認のための関数
  const handleConfirmDelete = (id) => {
    setConfirmDelete(id);  // 削除確認ダイアログを表示
  };

  // 削除の実行
  const handleDelete = async () => {
    if (confirmDelete === null) return;  // 削除対象がない場合は何もしない

    const url = `http://localhost:3001/api/diaries/${confirmDelete}`;

    try {
      const res = await fetch(url, {
        method: 'DELETE',
      });

      if (res.ok) {
        setLists(lists.filter(post => post.id !== confirmDelete)); // リストから削除
        setConfirmDelete(null); // 削除確認のリセット
        router.push('/');  // ホームに遷移
      } else {
        const err = await res.json();
        setError({ global: err.message });
        setConfirmDelete(null); // エラー時も確認をリセット
      }
    } catch (err) {
      console.error(err);
      setError({ global: 'サーバーエラーが発生しました' });
      setConfirmDelete(null); // エラー時も確認をリセット
    }
  };

  // 削除をキャンセル
  const handleCancelDelete = () => {
    setConfirmDelete(null);  // 削除確認のリセット
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className='home'>
      <h1>日記一覧</h1>
      <Link href={'/customers/new'}><button className='pushBtn'>新規作成</button></Link>

      {/* エラーメッセージがある場合は表示 */}
      {error && <div style={{ color: 'red' }}>{error.global}</div>}

  
      <ul>
        {lists.map((post) => (
          <li key={post.id}>
            <div className="item">
              <Link href={`/lists/${post.id}`}>
                  <p>{post.title} - {post.date}</p>
              </Link>
              {/* 削除ボタン */}
              <button onClick={() => handleConfirmDelete(post.id)} className='deleteBtn'>削除</button>
            </div>
          </li>
        ))}
      </ul>
      </div>

      {/* 削除確認ダイアログ */}
      {confirmDelete && (
        <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', backgroundColor: 'white', padding: '20px', boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)' }}>
          <p>本当に削除しますか？</p>
          <button onClick={handleDelete}>削除</button>
          <button onClick={handleCancelDelete}>キャンセル</button>
        </div>
      )}
      <DiaryCalendar diaries={lists} />
  
    </>
  );
}